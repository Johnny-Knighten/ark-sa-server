name: Build and Test
run-name: Build/Test for PR #${{ github.event.number }} on ${{ github.head_ref }}

on:
  pull_request:
    types:
      - opened
      - reopened
      - synchronize

jobs:
  lint-and-build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repo
      uses: actions/checkout@v3

    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Lint Dockerfile
      uses: hadolint/hadolint-action@v3.1.0
      with:
        dockerfile: "Dockerfile"

    - name: Build Docker image (Push To Cache)
      uses: docker/build-push-action@v3
      with:
        context: .
        file: ./Dockerfile
        push: false
        load: true
        tags: johnnyknighten/ark-sa-server:latest
        cache-to: type=gha,mode=max

  test:
    runs-on: ubuntu-latest
    needs:
      - lint-and-build
    steps:
    - name: Checkout Repo
      uses: actions/checkout@v3

    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image (From Cache)
      uses: docker/build-push-action@v3
      with:
        context: .
        file: ./Dockerfile
        push: false
        load: true
        tags: johnnyknighten/ark-sa-server:latest
        cache-from: type=gha

    - name: Test wget is installed
      run: |
        docker run --rm \
          --entrypoint wget \
          johnnyknighten/ark-sa-server:latest \
          --version

    - name: Test xz-utils is installed
      run: |
        docker run --rm \
          --entrypoint xz \
          johnnyknighten/ark-sa-server:latest \
          --version

    - name: Test xvfb is installed
      run: |
          docker run --rm \
            --entrypoint xvfb-run \
            johnnyknighten/ark-sa-server:latest \
            -h

    - name: Test ge-wine-proton is directory present
      run: |
        docker run --rm \
          --entrypoint test \
          johnnyknighten/ark-sa-server:latest \
          -d /opt/glorious_eggroll/proton

    - name: Test ge-wine-proton wine executable is present
      run: |
        docker run --rm \
          --entrypoint test \
          johnnyknighten/ark-sa-server:latest \
          -f /opt/glorious_eggroll/proton/bin/wine
          
    - name: Test ensure ark-sa-container/bin content is present
      run: |
        docker run --rm \
          --entrypoint bash \
          johnnyknighten/ark-sa-server:latest \
          -c "test -f /opt/ark-sa-container/bin/docker-entrypoint.sh && \
              test -f /opt/ark-sa-container/bin/launch-ark-sa.sh && \
              test -f /opt/ark-sa-container/bin/steam-cmd-install.sh"

    - name: Test STEAMCMD_SKIP_VALIDATION env var flag
      run: |
        OUTPUT=$(docker run --rm \
          -e TEST_DRY_RUN=True \
          -e STEAMCMD_SKIP_VALIDATION=True \
          johnnyknighten/ark-sa-server:latest)
        echo $OUTPUT | grep -q "SteamCMD Will Not Validate Ark SA Server Files"

    - name: Test ARK_MAP env var flag
      run: |
        OUTPUT=$(docker run --rm \
          -e TEST_DRY_RUN=True \
          -e ARK_MAP="Not_TheIsland_WP" \
          johnnyknighten/ark-sa-server:latest)
        echo $OUTPUT | grep -q "Not_TheIsland_WP"

    - name: Test ARK_GAME_PORT env var flag
      run: |
        OUTPUT=$(docker run --rm \
          -e TEST_DRY_RUN=True \
          -e ARK_GAME_PORT="12345" \
          johnnyknighten/ark-sa-server:latest)
        echo $OUTPUT | grep -q "\?Port=12345"


    - name: Test ARK_QUERY_PORT env var flag
      run: |
        OUTPUT=$(docker run --rm \
          -e TEST_DRY_RUN=True \
          -e ARK_QUERY_PORT="12345" \
          johnnyknighten/ark-sa-server:latest)
        echo $OUTPUT | grep -q "QueryPort=12345"
